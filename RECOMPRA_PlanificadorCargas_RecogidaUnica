Sub Cargador()

' Versión 1.0.2

    On Error Resume Next

' Declaro las variables
    Dim huecos_ocupados As Double, num_cargas As Long, num_coches As Integer, ultimo_coche As Long, codigo_proveedor As Long, dias_transporte As Integer
    Dim celda As Range, vhc_groups As New Scripting.Dictionary, bases As New Scripting.Dictionary, centros As New Scripting.Dictionary
    Dim texto_grupo As String, origen As String, destino As String, wb_name As String, xSh_name As String, loads_workbook_name As String, nombre_tabla As String
    Dim fecha_RFL As Long, fecha_BB As Long, intervalo_RFL As Range, intervalo_BB As Range, intervalo_RFL_2 As Range, intervalo_BB_2 As Range

' Apago el cálculo automático para evitar que otros archivos de Excel abiertos ralenticen la macro
    Application.Calculation = xlCalculationManual

' Establezco los días laborables para el transporte
    dias_transporte = 3

' Me quedo con el nombre del libro y la hoja activos, donde tengo la información de los vehículos a cargar
    wb_name = ActiveWorkbook.Name
    xSh_name = ActiveSheet.Name

' Introduzco el código de proveedor
    codigo_proveedor = InputBox("Por favor, introduce el código del proveedor a asignar estas cargas. Si dejas el campo en blanco, asegúrate de rellenarlo más adelante.", "Código Proveedor")

' Creo un diccionario con la relación entre Códigos de Sucursal Recompra y Códigos de Bases de Recompra
    Set bases = New Scripting.Dictionary
    
    With bases
        .Add "ACE", "ACB"
        .Add "AGP", "MB3"
        .Add "ALC", "AB2"
        .Add "BCN", "BCB"
        .Add "BGY", "BGB"
        .Add "BIO", "BIB"
        .Add "BIQ", "BQB"
        .Add "BDS", "BDB"
        .Add "BLQ", "BLB"
        .Add "BOD", "BOB"
        .Add "CAG", "CAB"
        .Add "CDG", "CD1"
        .Add "CIA", "CIB"
        .Add "CTA", "CTB"
        .Add "EDI", "ED6"
        .Add "EFL", "EFB"
        .Add "FAO", "FAB"
        .Add "FCO", "FCB"
        .Add "FLR", "FLB"
        .Add "FUE", "FUB"
        .Add "GRO", "GEB"
        .Add "GRX", "GRB"
        .Add "LEI", "LEB"
        .Add "LIS", "LI7"
        .Add "LPA", "LPB"
        .Add "LYS", "LYB"
        .Add "MAD", "MAB"
        .Add "MPL", "MP1"
        .Add "MRS", "MRB"
        .Add "MXP", "MXB"
        .Add "NCE", "NCB"
        .Add "OLB", "OBB"
        .Add "OPO", "OP7"
        .Add "ORY", "OR1"
        .Add "OVD", "OVB"
        .Add "PMI", "PMB"
        .Add "PSA", "PSB"
        .Add "REU", "REB"
        .Add "RMU", "RMB"
        .Add "SCQ", "SCB"
        .Add "SDR", "SDB"
        .Add "SUF", "SUB"
        .Add "SVQ", "SVB"
        .Add "TFN", "TNB"
        .Add "TFS", "TFB"
        .Add "TLS", "TLB"
        .Add "TSF", "TSB"
        .Add "VCE", "VCB"
        .Add "VLC", "VLN"
        .Add "XRY", "XRB"

    End With

' Creo un diccionario con los centros de coste para cada base,
    Set centros = New Scripting.Dictionary

    With centros

        .Add "AB2", "CEN"
        .Add "AB3", "CEN"
        .Add "ABA", "CEN"
        .Add "ABE", "CEN"
        .Add "ACB", "CEN"
        .Add "ADE", "CEN"
        .Add "ATR", "CEN"
        .Add "BCB", "CEN"
        .Add "BIB", "CEN"
        .Add "CDT", "CEN"
        .Add "FUB", "CEN"
        .Add "GBB", "CEN"
        .Add "GEB", "CEN"
        .Add "GRB", "CEN"
        .Add "IBB", "CEN"
        .Add "LEB", "CEN"
        .Add "LPB", "CEN"
        .Add "MAB", "CEN"
        .Add "MB3", "CEN"
        .Add "MBA", "CEN"
        .Add "MHB", "CEN"
        .Add "MJB", "CEN"
        .Add "OVB", "CEN"
        .Add "PMB", "CEN"
        .Add "PNA", "CEN"
        .Add "QRB", "CEN"
        .Add "REB", "CEN"
        .Add "RMB", "CEN"
        .Add "SCB", "CEN"
        .Add "SDB", "CEN"
        .Add "SVB", "CEN"
        .Add "TFB", "CEN"
        .Add "TNB", "CEN"
        .Add "VLN", "CEN"
        .Add "XRB", "CEN"
        .Add "XSP", "CEN"
        .Add "AHO", "CIT"
        .Add "AOB", "CIT"
        .Add "BAB", "CIT"
        .Add "BD6", "CIT"
        .Add "BDB", "CIT"
        .Add "BG2", "CIT"
        .Add "BGB", "CIT"
        .Add "BLB", "CIT"
        .Add "CAB", "CIT"
        .Add "CIB", "CIT"
        .Add "CTB", "CIT"
        .Add "FCB", "CIT"
        .Add "FLB", "CIT"
        .Add "LNB", "CIT"
        .Add "MX2", "CIT"
        .Add "MXB", "CIT"
        .Add "OBB", "CIT"
        .Add "OL7", "CIT"
        .Add "POB", "CIT"
        .Add "PSB", "CIT"
        .Add "SUB", "CIT"
        .Add "TSB", "CIT"
        .Add "VBB", "CIT"
        .Add "VCB", "CIT"
        .Add "BIQ", "FRN"
        .Add "BOB", "FRN"
        .Add "BQB", "FRN"
        .Add "CD1", "FRN"
        .Add "FRN", "FRN"
        .Add "LYB", "FRN"
        .Add "MLB", "FRN"
        .Add "MP1", "FRN"
        .Add "MRB", "FRN"
        .Add "NCB", "FRN"
        .Add "ORY", "FRN"
        .Add "TLB", "FRN"
        .Add "FAB", "GEN"
        .Add "FNB", "GEN"
        .Add "GEN", "GEN"
        .Add "LI7", "GEN"
        .Add "LIB", "GEN"
        .Add "OP7", "GEN"
        .Add "OPB", "GEN"
        .Add "PDB", "GEN"
        .Add "TEB", "GEN"
        .Add "AH2", "GRN"
        .Add "AHB", "GRN"
        .Add "CFB", "GRN"
        .Add "CHB", "GRN"
        .Add "EFB", "GRN"
        .Add "GRN", "GRN"
        .Add "HEB", "GRN"
        .Add "JTB", "GRN"
        .Add "RHB", "GRN"
        .Add "SKB", "GRN"
        .Add "ZTB", "GRN"
        .Add "DVB", "HRN"
        .Add "HRN", "HRN"
        .Add "SPB", "HRN"
        .Add "ZGB", "HRN"
        .Add "AYB", "TRY"
        .Add "AYT", "TRY"
        .Add "EBB", "TRY"
        .Add "ESB", "TRY"
        .Add "ISB", "TRY"
        .Add "SAB", "TRY"
        .Add "SAW", "TRY"
        .Add "TRY", "TRY"

    End With

' Ordeno primero por DeliveryDeadline más cercano, después por Ready for loading también más cercano. PRIORIZA ENTONCES EL ReadyForLoading sobre el DeliveryDeadline.
    nombre_tabla = ActiveSheet.ListObjects(1).Name
    ActiveSheet.ListObjects(1).Sort.SortFields.Clear
    ActiveSheet.ListObjects(1).Sort.SortFields.Add2 _
        Key:=Range(nombre_tabla & "[[#All],[DeliveryDeadline]]"), SortOn:=xlSortOnValues, _
        Order:=xlAscending, DataOption:=xlSortNormal

    With ActiveSheet.ListObjects(1).Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

    ActiveSheet.ListObjects(1).Sort.SortFields.Clear
    ActiveSheet.ListObjects(1).Sort.SortFields.Add2 _
        Key:=Range(nombre_tabla & "[[#All],[ReadyForLoading]]"), SortOn:=xlSortOnValues, _
        Order:=xlAscending, DataOption:=xlSortNormal

    With ActiveSheet.ListObjects(1).Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

' Determinamos origen y destino ÚNICOS y los almaceno en las variables origen y destino
    origen = Workbooks(wb_name).Sheets(xSh_name).Range("K2").Value
    destino = Workbooks(wb_name).Sheets(xSh_name).Range("N2").Value

' Cambiamos el valor de la variable origen, actualmente con el código de la sucursal de recompra por el código de la base,
    origen = bases.Item(origen)

' Creamos el libro donde subiremos las cargas
    Call Crear_Hoja_Carga(origen, destino, wb_name)

' Almaceno el nombre del libro en la variable loads_workbook_name
    loads_workbook_name = "Carga_Automática " & Format(Now(), "YYYY.MM.DD") & "_" & origen & "-" & destino & ".xlsx"

' Creo un diccionario con los grupos con un valor especial para el espacio de carga en camión, los que no aparezcan ocuparán un hueco de un coche
    Set vhc_groups = New Scripting.Dictionary

    With vhc_groups
        .Add "X", 0.9
        .Add "AA", 0.9
        .Add "J", 1.4
        .Add "JJ", 1.4
        .Add "K", 2
        .Add "L", 1.14
        .Add "F", 1.14
        .Add "S", 1.14

    End With


' Comienza el bucle en el que determina el número el hueco de cada vehículo de la lista en el camión, hasta llegar a 8
    For Each celda In Range("AM2", Range("AM2").End(xlDown))
        
        ' Almaceno el nombre del grupo en forma de texto en la variable texto_grupoX
            texto_grupo = celda.Value
        
        ' Si la variable texto_grupo tiene un valor en el diccionario de los grupos especiales, el espacio en el camión se sumará por ese valor. Sino, sumará un hueco.
            'Debug.Print vhc_groups.Exists(texto_grupo)
            If vhc_groups.Exists(texto_grupo) = True Then
                huecos_ocupados = huecos_ocupados + vhc_groups.Item(texto_grupo)
                num_coches = num_coches + 1
            
                Else:
                huecos_ocupados = huecos_ocupados + 1
                num_coches = num_coches + 1
                    
            End If
        
        ' Si tras sumar el coche completamos carga, restablecemos la variable huecos_ocupados (huecos en el camión) y apuntamos 1 carga en la variable num_cargas
            If huecos_ocupados >= 8 Then
                num_cargas = num_cargas + 1
                huecos_ocupados = 0

                    fecha_RFL = celda.Offset(-num_coches + 1, -21)
                    For Each intervalo_RFL In Range(celda.Offset(0, -21), celda.Offset(-num_coches + 1, -21))
                        If intervalo_RFL >= fecha_RFL Then
                            fecha_RFL = intervalo_RFL.Value
                        End If
                        Debug.Print "Fecha_RFL: " & fecha_RFL
                    Next intervalo_RFL
                    
                    fecha_BB = celda.Offset(-num_coches + 1, -20)
                    For Each intervalo_BB In Range(celda.Offset(0, -20), celda.Offset(-num_coches + 2, -20))
                        If intervalo_BB <= fecha_BB Then
                            fecha_BB = intervalo_BB - Value
                        End If
                        Debug.Print "Fecha_BB útlima carga: " & fecha_BB
                    Next intervalo_BB
                    
                ' Insertamos en las columnas correspondientes de la hoja de carga el origen y destino y fechas
                    With Workbooks(loads_workbook_name).Sheets("Hoja1")
                            .Cells(1 + num_cargas, 10).Value = origen
                            .Cells(1 + num_cargas, 11).Value = destino

                        'Fechas de recogida desde, recogida hasta y entrega desde
                            .Cells(1 + num_cargas, 12).Value = WorksheetFunction.Min(fecha_BB, fecha_RFL)
                            .Cells(1 + num_cargas, 13).Value = WorksheetFunction.Min(fecha_BB, fecha_RFL)
                            .Cells(1 + num_cargas, 14).Value = WorksheetFunction.Min(fecha_BB, fecha_RFL)
                        
                        'Fechas de recogida hasta y entrega hasta
                            .Cells(1 + num_cargas, 15).Value = WorksheetFunction.Min(WorksheetFunction.WorkDay_Intl(WorksheetFunction.Min(fecha_BB, fecha_RFL), dias_transporte), fecha_BB)
                        
                        'Código proveedor
                            If codigo_proveedor = 0 Then
                                .Cells(1 + num_cargas, 16).Value = "Pte. Añadir"
                                Else
                                .Cells(1 + num_cargas, 16).Value = codigo_proveedor
                            End If
                        
                        'Número de carga
                            .Cells(1 + num_cargas, 20).Value = num_cargas

                        'Ceco = Recompra
                            .Cells(1 + num_cargas, 2).Value = "Recompra"

                        'Tipo de carga = 2
                            .Cells(1 + num_cargas, 3).Value = 2

                        'Centro de coste
                            .Cells(1 + num_cargas, 1).Value = centros.Item(origen)

                    End With

                num_coches = 0
                fecha_RFL = 1
                fecha_BB = 50000

            End If

        ' Apunto la última línea que se encuentra al pulsar CTRL + ABAJO en la celda AM2
            ultimo_coche = Range("AM2").End(xlDown).Row

    Next celda

' Comienzo la comprobación de si se han quedado coches sueltos sin carga asignada por no llegar a 8 huecos,
    If huecos_ocupados > 0 Then

        ' Apunto la última línea que se encuentra al pulsar CTRL + ABAJO en la celda AM2
            ultimo_coche = Range("AM2").End(xlDown).Row
        
        num_cargas = num_cargas + 1
        
        ' Determinamos la fecha mínima para la carga, para ello damos valor a las dos matrices de las fechas correspondientes de los vehículos de la carga
            fecha_RFL = Cells(ultimo_coche - num_coches + 1, 18)
            For Each intervalo_RFL_2 In Range(Cells(ultimo_coche, 18), Cells(ultimo_coche - num_coches + 1, 18))
                If intervalo_RFL_2 >= fecha_RFL Then
                    fecha_RFL = intervalo_RFL_2.Value
                End If
            Debug.Print "Fecha_RFL última carga: " & fecha_RFL
            Next intervalo_RFL_2
            
            fecha_BB = Cells(ultimo_coche - num_coches + 1, 19)
            For Each intervalo_BB_2 In Range(Cells(ultimo_coche, 19), Cells(ultimo_coche - num_coches + 1, 19))
                If intervalo_BB_2 <= fecha_BB Then
                    fecha_BB = intervalo_BB_2.Value
                End If
            Debug.Print "Fecha_BB útlima carga: " & fecha_BB
            
            Next intervalo_BB_2

        ' Insertamos en las columnas correspondientes de la hoja de carga el origen y destino y fechas
            With Workbooks(loads_workbook_name).Sheets("Hoja1")
                    .Cells(1 + num_cargas, 10).Value = origen
                    .Cells(1 + num_cargas, 11).Value = destino

                'Fechas de recogida desde, recogida hasta y entrega desde
                    .Cells(1 + num_cargas, 12).Value = WorksheetFunction.Min(fecha_BB, fecha_RFL)
                    .Cells(1 + num_cargas, 13).Value = WorksheetFunction.Min(fecha_BB, fecha_RFL)
                    .Cells(1 + num_cargas, 14).Value = WorksheetFunction.Min(fecha_BB, fecha_RFL)
                
                'Fechas de recogida hasta y entrega hasta
                    .Cells(1 + num_cargas, 15).Value = WorksheetFunction.Min(WorksheetFunction.WorkDay_Intl(WorksheetFunction.Min(fecha_BB, fecha_RFL), dias_transporte), fecha_BB)
                
                'Código proveedor
                    If codigo_proveedor = 0 Then
                        .Cells(1 + num_cargas, 16).Value = "Pte. Añadir"
                        Else
                        .Cells(1 + num_cargas, 16).Value = codigo_proveedor
                    End If
                    
                'Número de carga
                    .Cells(1 + num_cargas, 20).Value = num_cargas

                'Ceco = Recompra
                    .Cells(1 + num_cargas, 2).Value = "Recompra"

                'Tipo de carga = 2
                    .Cells(1 + num_cargas, 3).Value = 2

                'Centro de coste
                    .Cells(1 + num_cargas, 1).Value = centros.Item(origen)

                'Número de vehículos
                    If huecos_ocupados <= 4 Then
                        .Cells(1 + num_cargas, 18).Value = num_coches
                        .Cells(1 + num_cargas, 19).Value = num_coches
                    
                    End If

            End With

            fecha_RFL = 1
            fecha_BB = 50000
            huecos_ocupados = 0
        
    End If

' Selecciono las fechas de la hoja de carga creada y les aplico el formato correcto
    Workbooks(loads_workbook_name).Activate
    Sheets("Hoja1").Range(Cells(2, 12), Cells(2 + num_cargas, 15)).NumberFormat = "m/d/yyyy"

' Autoajusto el ancho de las columnas
    Range("A:T").Columns.AutoFit

' Enciendo el cálculo automático de Excel
    Application.Calculation = xlCalculationAutomatic

' Fin de la macro

End Sub


Private Sub Crear_Hoja_Carga(ByVal nombre_origen As String, nombre_destino As String, wb_name As String)

' Esta macro sólo sirve para crear el archivo de ETC en blanco y guardarlo en la ruta de destino que se especifique.
' Si más adelante cambia el formato de la importación, deberéis cambiarlo aquí primero para ajustar los encabezados.

Dim loads_workbook As String

Workbooks.Add (xlWBATWorksheet)
loads_workbook = ActiveWorkbook.Name


' Damos el formato adecuado al libro, nombrando los encabezados
    With Workbooks(loads_workbook).Sheets("Hoja1")
        .Range("A1").Value = "Centro"
        .Range("B1").Value = "Ceco"
        .Range("C1").Value = "Tipo"
        .Range("D1").Value = "NumOrden"
        .Range("E1").Value = "Matricula"
        .Range("F1").Value = "Bastidor"
        .Range("G1").Value = "NombreMarca"
        .Range("H1").Value = "Modelo"
        .Range("I1").Value = "ConcesionarioRecomprador"
        .Range("J1").Value = "SucursalRecompra"
        .Range("K1").Value = "CampaDestino"
        .Range("L1").Value = "RecogidaDesde"
        .Range("M1").Value = "RecogidaHasta"
        .Range("N1").Value = "EntregaDesde"
        .Range("O1").Value = "EntregaHasta"
        .Range("P1").Value = "Proveedor"
        .Range("Q1").Value = "Importe"
        .Range("R1").Value = "minimoVhs"
        .Range("S1").Value = "maximoVhs"
        .Range("T1").Value = "Carga"
        
    End With

' Aplicamos el color azul de fondo, blanco en la fuente y negrita
    With Workbooks(loads_workbook).Sheets("Hoja1").Range("A1:T1")
        .Interior.Color = RGB(91, 155, 213)
        .Font.Color = vbWhite
        .Font.Bold = True
        
    End With

' Autoajusta las columnas y centra el contenido de las celdas
    With Workbooks(loads_workbook).Sheets("Hoja1").Range("A:T")
        .HorizontalAlignment = xlHAlignCenter
        .Columns.AutoFit
        
    End With

' Guarda el archivo en la ruta señalada IMPORTANTE ACTUALIZAR A LA DIRECCIÓN QUE CADA UNO QUIERA!!
    ActiveWorkbook.SaveAs Filename:="C:\Users\luisalbarracin\Desktop\Test\Carga_Automática " _
    & Format(Now(), "YYYY.MM.DD") & "_" & nombre_origen & "-" & nombre_destino & ".xlsx" _
    , FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False

' Activa el libro donde están los datos de los vehículos a cargar. IMPORTANTE!! Si no lo activa la macro pierde las referencias y no funcionará.
    Workbooks(wb_name).Activate

End Sub
